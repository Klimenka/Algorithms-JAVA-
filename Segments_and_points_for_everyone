/*По данным \( n \) отрезкам необходимо найти множество точек минимального размера, 
для которого каждый из отрезков содержит хотя бы одну из точек.

В первой строке дано число \( 1 \le n \le 100 \) отрезков. Каждая из последующих \( n \) строк содержит по два числа 
\( 0 \le l \le r \le 10^9 \), задающих начало и конец отрезка. 
Выведите оптимальное число \( m \) точек и сами \( m \) точек. Если таких множеств точек несколько, выведите любое из них.*/
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        int counter = 0;

        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int lastPoint = -1;
        //max number of points = number of segments
        StringBuilder points = new StringBuilder();
        int[][] segments = new int[n][2];
        for(int i = 0; i < n; i++){
            segments[i][0] = input.nextInt();
            segments[i][1] = input.nextInt();
        }
        Arrays.sort(segments, Comparator.comparingInt(a -> a[1]));
        for(int i = 0; i < n; i++){
            if(lastPoint < segments[i][0]){
                lastPoint = segments[i][1];
                counter++;
                points.append(lastPoint + " ");
            }
        }

        System.out.println(counter + "");
        System.out.println(points);
    }
}
